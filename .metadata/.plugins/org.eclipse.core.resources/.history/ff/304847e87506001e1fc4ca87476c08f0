// step08
package edu.pnu.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import edu.pnu.domain.Member;
import edu.pnu.domain.PreparedStatement;

public class MemberDao {
	
	private String driver = "org.h2.Driver";
	private String url = "jdbc:h2:tcp://localhost/~/Mission02";
	private String username = "scott";
	private String password = "tiger";
	
	private Connection con;
	
	public MemberDao() {
		try {
			Class.forName(driver);
			
			DriverManager.getConnection(url, username, password);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// step10
	public Member getMember(Long id) {
		try {
			Statement stmt = con.createStatement();
			
			ResultSet rs = stmt.executeQuery(String.format("select * from Member where id=%d", id));
			
			rs.next();
			
			Member m = Member.builder()
					.id(rs.getLong("id"))
					.pass(rs.getString("pass"))
					.name(rs.getString("name"))
					.regidate(rs.getDate("regidate"))
					.build();
			rs.close();
			stmt.close();
			
			return m;
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// step14.
	public List<Member> getMembers() {
		List<Member> memberList = new ArrayList<>();
		
		try {
			Statement stmt = con.createStatement();
			
			ResultSet rs = stmt.executeQuery(String.format("select * from Member"));
			
			while(rs.next()) {
				Member m = Member.builder()
						.id(rs.getLong("id"))
						.pass(rs.getString("pass"))
						.name(rs.getString("name"))
						.regidate(rs.getDate("regidate"))
						.build();
				memberList.add(m);
			}
			
			rs.close();
			stmt.close();
			
//			return m;
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		return memberList;
	}

	// step17
	public int insertMember(Member member) {
		String sql = "insert into Member (id, name, pass) value (?, ?, ?)";
		try {
			java.sql.PreparedStatement ps = con.prepareStatement(sql);
			
			rs.next();
			
			Member m = Member.builder()
					.id(rs.getLong("id"))
					.pass(rs.getString("pass"))
					.name(rs.getString("name"))
					.build();
			rs.close();
			stmt.close();
			
			return 0;
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		return -1;
	}

	// step20
	public int updateMember(Member member) {
	    try {
	        java.sql.PreparedStatement pstmt = con.prepareStatement("UPDATE Member SET name = ?, pass = ? WHERE id = ?");
	        pstmt.setString(1, member.getName());
	        pstmt.setString(2, member.getPass());
	        pstmt.setLong(3, member.getId());
	        
	        int rowsAffected = pstmt.executeUpdate();
	        
	        pstmt.close();
	        
	        if (rowsAffected > 0) {
	            return 0; // 성공적으로 멤버 정보가 업데이트된 경우
	        } else {
	            return -1; // 멤버 정보 업데이트 실패
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	        return -1; // 예외 발생으로 인한 멤버 정보 업데이트 실패
	    }
	}

}

