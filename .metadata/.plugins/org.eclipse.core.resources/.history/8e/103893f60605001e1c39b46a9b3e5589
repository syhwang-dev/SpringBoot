package com.rubypaper.controller;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;

//ctrl shift o: 자동으로 import
//@Controller
@RestController
public class BoardController{
	public BoardController() {
		System.out.println("=".repeat(50));
		System.out.println("BoardController가 생성되었습니다.");
		System.out.println("=".repeat(50));
	}
	
	// 호출하는 url은 다 같음
	@GetMapping("/hello")
	public String hello1(String name) {
		return "Get Hello : " + name;
	}
	
	@PostMapping("/hello")
	public String hello2(String name) {
		return "Post Hello : " + name;
	}
	
	@PutMapping("/hello")
	public String hello3(String name) {
		return "Put Hello : " + name;
	}
	
	@DeleteMapping("/hello")
	public String hello4(String name) {
		return "Delete Hello : " + name;
	}
}

// 내가 인스턴스를 만든적이 없는데 자동으로 객체를 생성 -> 부트가 만들어줌!
// 어디에다가 저장을 하지 않을까? 컨테이너에 저장을 함.
// @RestController 이런 어노테이션이 붙어있으면 부트가 자동으로 생성해줌.
// @RestController든 @Controller든 다른 어노테이션이든, 시작점이 따로 있음.
// 이 클래스가 하는 역할에 따라 조금씩 다른 어노테이션 이름을 줌.
// 그러니까 굳이 @Controller를 사용하지 않아도 된다는 뜻임. 하지만 협업을 위해 통상적으로 사용하자.